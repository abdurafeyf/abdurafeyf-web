---
import HeaderLink from "./HeaderLink.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../config";
---

<header>
  <div class="header-section">
    <div class="header-frame">
      <h1>{SITE_TITLE}</h1>
      <h2>{SITE_DESCRIPTION}</h2>
    </div>
    <div class="header-frame">
      <div class="profile-container">
        <div class="zoomed-circle"></div>
        <!-- Music Button -->
        <button class="music-btn" id="music-toggle">
          <svg viewBox="0 0 24 24" fill="#1db954">
            <path
              d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.84-.179-.959-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.361 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.42 1.56-.299.421-1.02.599-1.559.3z"
            ></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
</header>

<nav>
  <HeaderLink href="/">home</HeaderLink>
  <HeaderLink href="/posts">posts</HeaderLink>
</nav>

<!-- Ambient Background -->
<div class="ambient-bg" id="ambient-bg"></div>

<!-- Floating Music Player -->
<div class="floating-player hidden" id="music-player">
  <div class="player-card">
    <iframe
      id="spotify-embed"
      src="https://open.spotify.com/embed/track/6Ql76QUTIXajTh9cVjrAZl?utm_source=generator&theme=0"
      width="100%"
      height="152"
      frameborder="0"
      allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
      loading="lazy"
      style="border-radius: 12px;"></iframe>
    <button class="close-btn" id="close-player">âœ•</button>
  </div>
</div>

<style>
  h2 {
    margin: 0.5em 0;
  }

  .profile-container {
    position: relative;
    display: inline-block;
  }

  .zoomed-circle {
    width: 250px;
    height: 250px;
    border-radius: 50%;
    background-image: url("/public/standing-profile.jpg");
    background-size: 150%;
    background-position: center;
    background-repeat: no-repeat;
  }

  .music-btn {
    position: absolute;
    top: 15px;
    right: 15px;
    width: 40px;
    height: 40px;
    background: white;
    border: none;
    border-radius: 50%;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .music-btn:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 20px rgba(29, 185, 84, 0.3);
  }

  /* Ambient Background */
  .ambient-bg {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(
      circle at center,
      rgba(29, 185, 84, 0.3),
      rgba(0, 0, 0, 0.8)
    );
    background-size: 200% 200%;
    filter: blur(80px);
    z-index: -1;
    opacity: 0;
    transition:
      opacity 0.6s ease,
      background 0.6s ease;
    animation: ambientMove 10s ease-in-out infinite alternate;
  }

  .ambient-bg.active {
    opacity: 1;
  }

  @keyframes ambientMove {
    0% {
      background-position: 0% 0%;
    }
    100% {
      background-position: 100% 100%;
    }
  }

  /* Player */
  .floating-player {
    position: fixed;
    bottom: 20px;
    right: 20px;
    transform: translateY(150%);
    z-index: 1000;
    transition: transform 0.4s ease;
    opacity: 0;
  }

  .floating-player.visible {
    transform: translateY(0%);
    opacity: 1;
  }

  .player-card {
    background: white;
    border-radius: 20px;
    padding: 20px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
    width: 350px;
    position: relative;
  }

  .close-btn {
    position: absolute;
    top: -15px;
    right: -15px;
    background: #f5f5f5;
    border: none;
    width: 35px;
    height: 35px;
    border-radius: 50%;
    cursor: pointer;
    font-size: 16px;
    color: #333;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    transition: all 0.2s ease;
  }

  .close-btn:hover {
    background: #e5e5e5;
    transform: scale(1.1);
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", async function () {
    const musicToggle = document.getElementById("music-toggle");
    const musicPlayer = document.getElementById("music-player");
    const closePlayer = document.getElementById("close-player");
    const ambientBg = document.getElementById("ambient-bg");
    const trackUrl = "https://open.spotify.com/track/6Ql76QUTIXajTh9cVjrAZl";

    async function fetchAlbumArtColors(url) {
      try {
        const res = await fetch(
          `https://open.spotify.com/oembed?url=${encodeURIComponent(url)}`
        );
        const data = await res.json();
        const img = new Image();
        img.crossOrigin = "Anonymous";
        img.src = data.thumbnail_url;

        return new Promise((resolve) => {
          img.onload = () => {
            const canvas = document.createElement("canvas");
            canvas.width = img.width;
            canvas.height = img.height;
            const ctx = canvas.getContext("2d");
            ctx.drawImage(img, 0, 0);
            const pixels = ctx.getImageData(
              0,
              0,
              canvas.width,
              canvas.height
            ).data;

            let r = 0,
              g = 0,
              b = 0,
              count = 0;
            for (let i = 0; i < pixels.length; i += 4 * 10) {
              // sample every 10th pixel
              r += pixels[i];
              g += pixels[i + 1];
              b += pixels[i + 2];
              count++;
            }
            r = Math.floor(r / count);
            g = Math.floor(g / count);
            b = Math.floor(b / count);

            resolve(
              `radial-gradient(circle at center, rgba(${r},${g},${b},0.4), rgba(0,0,0,0.8))`
            );
          };
        });
      } catch (err) {
        console.error("Error fetching album art:", err);
        return null;
      }
    }

    musicToggle.addEventListener("click", async function () {
      musicPlayer.classList.add("visible");
      ambientBg.classList.add("active");

      const bgGradient = await fetchAlbumArtColors(trackUrl);
      if (bgGradient) {
        ambientBg.style.background = bgGradient;
      }
    });

    closePlayer.addEventListener("click", function () {
      musicPlayer.classList.remove("visible");
      ambientBg.classList.remove("active");
    });

    document.addEventListener("keydown", function (e) {
      if (e.key === "Escape" && musicPlayer.classList.contains("visible")) {
        closePlayer.click();
      }
    });
  });
</script>
