---
// Header.astro
import HeaderLink from "./HeaderLink.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../config";
---

<header>
  <div class="header-section">
    <div class="header-frame">
      <h1>{SITE_TITLE}</h1>
      <h2>{SITE_DESCRIPTION}</h2>
    </div>

    <div class="header-frame">
      <div class="profile-container">
        <div class="zoomed-circle" role="img" aria-label="profile image"></div>

        <!-- Simple Spotify Badge -->
        <button
          class="music-btn"
          id="music-toggle"
          type="button"
          aria-label="Open music player"
        >
          <!-- SVG uses currentColor so CSS can recolor it -->
          <svg viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
            <path
              d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.84-.179-.959-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.361 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.42 1.56-.299.421-1.02.599-1.559.3z"
            ></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
</header>

<nav>
  <HeaderLink href="/">home</HeaderLink>
  <HeaderLink href="/posts">posts</HeaderLink>
</nav>

<!-- Backdrop for overlay effect -->
<div class="backdrop hidden" id="backdrop" aria-hidden="true"></div>

<!-- Floating Music Player -->
<div
  class="floating-player hidden"
  id="music-player"
  role="dialog"
  aria-modal="true"
  aria-hidden="true"
>
  <div class="player-card">
    <iframe
      src="https://open.spotify.com/embed/track/4iV5W9uYEdYUVa79Axb7Rh?utm_source=generator&theme=0"
      width="100%"
      height="152"
      frameborder="0"
      allowfullscreen=""
      allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
      loading="lazy"
      style="border-radius: 12px; pointer-events: auto;"
    >
    </iframe>

    <button
      class="close-btn"
      id="close-player"
      type="button"
      aria-label="Close music player">âœ•</button
    >
  </div>
</div>

<style>
  /* Utility used by this component so it doesn't rely on external CSS frameworks */
  .hidden {
    display: none !important;
  }

  h2 {
    margin: 0.5em 0;
  }

  .header-section {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
    padding: 0.5rem 0;
  }
  .header-frame {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .profile-container {
    position: relative;
    display: inline-block;
    /* ensure container provides a stacking context */
    z-index: 1;
  }

  /* corrected image path (Astro serves /public at root) */
  .zoomed-circle {
    width: 160px;
    height: 160px;
    border-radius: 50%;
    background-image: url("/standing-profile.jpg");
    background-size: 150%;
    background-position: center;
    background-repeat: no-repeat;
    position: relative;
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);
    transition: transform 0.35s ease;
    z-index: 1;
  }

  .zoomed-circle:hover {
    transform: translateY(-4px) scale(1.01);
  }

  /* Music Button - sits above the image and responds to hover/focus */
  .music-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    width: 44px;
    height: 44px;
    background: rgba(255, 255, 255, 0.98);
    border: none;
    border-radius: 50%;
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.12);
    cursor: pointer;
    transition:
      transform 0.18s ease,
      background 0.18s ease,
      color 0.18s ease,
      box-shadow 0.18s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 3; /* ensure it's on top */
    color: #1db954; /* icon color (SVG uses currentColor) */
    padding: 0;
    pointer-events: auto;
  }

  .music-btn svg {
    width: 22px;
    height: 22px;
    display: block;
  }

  .music-btn:hover,
  .music-btn:focus {
    transform: scale(1.08);
    background: #1db954;
    color: #fff; /* icon turns white */
    box-shadow: 0 10px 30px rgba(29, 185, 84, 0.18);
    outline: none;
  }

  .music-btn:focus {
    box-shadow:
      0 10px 40px rgba(29, 185, 84, 0.25),
      0 0 0 4px rgba(29, 185, 84, 0.08);
  }

  /* Backdrop for overlay effect */
  .backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.6);
    z-index: 999;
    transition: opacity 0.3s ease;
    opacity: 0;
  }
  .backdrop.visible {
    opacity: 1;
  }

  /* Floating Player */
  .floating-player {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.92);
    z-index: 1000;
    transition:
      transform 0.28s cubic-bezier(0.2, 0.9, 0.2, 1),
      opacity 0.28s ease;
    opacity: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .floating-player.visible {
    transform: translate(-50%, -50%) scale(1);
    opacity: 1;
  }

  .player-card {
    background: white;
    border-radius: 16px;
    padding: 18px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.25);
    width: 360px;
    position: relative;
  }

  .player-card iframe {
    pointer-events: auto !important;
    position: relative;
    z-index: 1;
    border: none;
    outline: none;
  }

  .close-btn {
    position: absolute;
    top: -12px;
    right: -12px;
    background: #ff4757;
    border: none;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    cursor: pointer;
    font-size: 16px;
    color: white;
    transition:
      transform 0.15s ease,
      background 0.15s ease;
    box-shadow: 0 6px 16px rgba(255, 71, 87, 0.28);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
  }
  .close-btn:hover {
    transform: scale(1.06);
    background: #ff3742;
  }

  /* Hide scrollbar when modal is open */
  body.modal-open {
    overflow: hidden;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .zoomed-circle {
      width: 120px;
      height: 120px;
      background-size: 160%;
    }
    .player-card {
      width: 320px;
      padding: 16px;
    }
    .music-btn {
      width: 40px;
      height: 40px;
      top: 8px;
      right: 8px;
    }
  }

  @media (max-width: 480px) {
    .zoomed-circle {
      width: 96px;
      height: 96px;
      background-size: 200%;
    }
    .player-card {
      width: 280px;
      padding: 14px;
      margin: 20px;
    }
  }
</style>

<script>
  (function initMusicPlayer() {
    function ready(fn) {
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", fn);
      } else {
        fn();
      }
    }

    ready(function () {
      const musicToggle = document.getElementById("music-toggle");
      const musicPlayer = document.getElementById("music-player");
      const closePlayer = document.getElementById("close-player");
      const backdrop = document.getElementById("backdrop");

      if (!musicToggle || !musicPlayer || !closePlayer || !backdrop) return;

      // helper to open modal
      function openPlayer() {
        // ensure visible state starts from not-hidden
        backdrop.classList.remove("hidden");
        musicPlayer.classList.remove("hidden");
        // small reflow to ensure transitions run
        void backdrop.offsetHeight;
        backdrop.classList.add("visible");
        musicPlayer.classList.add("visible");
        musicPlayer.setAttribute("aria-hidden", "false");
        backdrop.setAttribute("aria-hidden", "false");
        document.body.classList.add("modal-open");
      }

      // helper to close modal
      function closePlayerModal() {
        backdrop.classList.remove("visible");
        musicPlayer.classList.remove("visible");
        musicPlayer.setAttribute("aria-hidden", "true");
        backdrop.setAttribute("aria-hidden", "true");
        document.body.classList.remove("modal-open");

        // allow transition out before hiding from flow
        setTimeout(function () {
          backdrop.classList.add("hidden");
          musicPlayer.classList.add("hidden");
        }, 300);
      }

      musicToggle.addEventListener("click", function (e) {
        e.stopPropagation();
        openPlayer();
      });

      closePlayer.addEventListener("click", function (e) {
        e.stopPropagation();
        closePlayerModal();
      });

      // Close on backdrop click
      backdrop.addEventListener("click", function (e) {
        if (e.target === backdrop) closePlayerModal();
      });

      // Close with Escape
      document.addEventListener("keydown", function (e) {
        if (
          (e.key === "Escape" || e.key === "Esc") &&
          musicPlayer.classList.contains("visible")
        ) {
          closePlayerModal();
        }
      });
    });
  })();
</script>
