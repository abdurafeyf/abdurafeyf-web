---
import HeaderLink from "./HeaderLink.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../config";
---

<header>
  <div class="header-section">
    <div class="header-frame">
      <h1>{SITE_TITLE}</h1>
      <h2>{SITE_DESCRIPTION}</h2>
    </div>
    <div class="header-frame">
      <div class="profile-container">
        <div class="zoomed-circle"></div>

        <!-- Enhanced Music Button + Hover Player -->
        <div class="music-wrapper">
          <button class="music-btn vinyl" id="music-toggle">
            <!-- Enhanced SVG with waveform and album art -->
            <svg viewBox="0 0 100 100" class="vinyl-svg">
              <!-- Waveform bars (positioned around the vinyl) -->
              <g class="waveform" opacity="0">
                <rect
                  x="25"
                  y="45"
                  width="1.5"
                  height="10"
                  fill="white"
                  class="wave-bar"
                >
                  <animate
                    attributeName="height"
                    values="4;12;4"
                    dur="0.8s"
                    repeatCount="indefinite"></animate>
                  <animate
                    attributeName="y"
                    values="48;44;48"
                    dur="0.8s"
                    repeatCount="indefinite"></animate>
                </rect>
                <rect
                  x="28"
                  y="42"
                  width="1.5"
                  height="16"
                  fill="white"
                  class="wave-bar"
                >
                  <animate
                    attributeName="height"
                    values="8;18;8"
                    dur="1.2s"
                    repeatCount="indefinite"></animate>
                  <animate
                    attributeName="y"
                    values="46;41;46"
                    dur="1.2s"
                    repeatCount="indefinite"></animate>
                </rect>
                <rect
                  x="31"
                  y="46"
                  width="1.5"
                  height="8"
                  fill="white"
                  class="wave-bar"
                >
                  <animate
                    attributeName="height"
                    values="3;10;3"
                    dur="0.6s"
                    repeatCount="indefinite"></animate>
                  <animate
                    attributeName="y"
                    values="48.5;45;48.5"
                    dur="0.6s"
                    repeatCount="indefinite"></animate>
                </rect>
                <rect
                  x="34"
                  y="43"
                  width="1.5"
                  height="14"
                  fill="white"
                  class="wave-bar"
                >
                  <animate
                    attributeName="height"
                    values="6;16;6"
                    dur="1.0s"
                    repeatCount="indefinite"></animate>
                  <animate
                    attributeName="y"
                    values="47;42;47"
                    dur="1.0s"
                    repeatCount="indefinite"></animate>
                </rect>
                <!-- Mirror on the right side -->
                <rect
                  x="64"
                  y="45"
                  width="1.5"
                  height="10"
                  fill="white"
                  class="wave-bar"
                >
                  <animate
                    attributeName="height"
                    values="4;12;4"
                    dur="0.9s"
                    repeatCount="indefinite"></animate>
                  <animate
                    attributeName="y"
                    values="48;44;48"
                    dur="0.9s"
                    repeatCount="indefinite"></animate>
                </rect>
                <rect
                  x="67"
                  y="42"
                  width="1.5"
                  height="16"
                  fill="white"
                  class="wave-bar"
                >
                  <animate
                    attributeName="height"
                    values="8;18;8"
                    dur="1.1s"
                    repeatCount="indefinite"></animate>
                  <animate
                    attributeName="y"
                    values="46;41;46"
                    dur="1.1s"
                    repeatCount="indefinite"></animate>
                </rect>
                <rect
                  x="70"
                  y="46"
                  width="1.5"
                  height="8"
                  fill="white"
                  class="wave-bar"
                >
                  <animate
                    attributeName="height"
                    values="3;10;3"
                    dur="0.7s"
                    repeatCount="indefinite"></animate>
                  <animate
                    attributeName="y"
                    values="48.5;45;48.5"
                    dur="0.7s"
                    repeatCount="indefinite"></animate>
                </rect>
                <rect
                  x="73"
                  y="43"
                  width="1.5"
                  height="14"
                  fill="white"
                  class="wave-bar"
                >
                  <animate
                    attributeName="height"
                    values="6;16;6"
                    dur="1.3s"
                    repeatCount="indefinite"></animate>
                  <animate
                    attributeName="y"
                    values="47;42;47"
                    dur="1.3s"
                    repeatCount="indefinite"></animate>
                </rect>
              </g>

              <!-- Vinyl record -->
              <circle cx="50" cy="50" r="48" fill="black" class="vinyl-outer"
              ></circle>
              <circle cx="50" cy="50" r="40" fill="#222" class="vinyl-inner"
              ></circle>
              <circle cx="50" cy="50" r="10" fill="white" class="vinyl-center"
              ></circle>
              <circle cx="50" cy="50" r="4" fill="black" class="vinyl-hole"
              ></circle>

              <!-- Album art container -->
              <defs>
                <clipPath id="vinyl-clip">
                  <circle cx="50" cy="50" r="40"></circle>
                </clipPath>
              </defs>
              <image
                x="10"
                y="10"
                width="80"
                height="80"
                clip-path="url(#vinyl-clip)"
                class="album-art"
                opacity="0"
              />
            </svg>
          </button>

          <div class="hover-player">
            <iframe
              id="spotify-player"
              src="https://open.spotify.com/embed/track/6Ql76QUTIXajTh9cVjrAZl?utm_source=generator&theme=0"
              width="300"
              height="80"
              frameborder="0"
              allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
              loading="lazy"
              style="border-radius: 12px;"></iframe>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>

<nav>
  <HeaderLink href="/">home</HeaderLink>
  <HeaderLink href="/posts">posts</HeaderLink>
</nav>

<style>
  h2 {
    margin: 0.5em 0;
  }

  .profile-container {
    position: relative;
    display: inline-block;
  }

  .zoomed-circle {
    width: 250px;
    height: 250px;
    border-radius: 50%;
    background-image: url("/public/standing-profile.jpg");
    background-size: 150%;
    background-position: center;
    background-repeat: no-repeat;
  }

  .music-wrapper {
    position: absolute;
    top: 15px;
    right: 15px;
    display: flex;
    align-items: center;
  }

  .music-btn {
    width: 40px;
    height: 40px;
    background: white;
    border: none;
    border-radius: 50%;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2;
    overflow: hidden;
    position: relative;

    /* CSS custom properties for dynamic theming */
    --dominant-color: #1db954;
    --glow-color: rgba(29, 185, 84, 0.25);
  }

  .music-btn::before {
    content: "";
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(
      45deg,
      var(--dominant-color),
      transparent,
      var(--dominant-color)
    );
    border-radius: 50%;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: -1;
  }

  .vinyl-svg {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    pointer-events: none;
  }

  /* Spinning animation */
  .spinning {
    animation: spin 3s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  .music-btn:hover {
    transform: scale(1.1);
    box-shadow:
      0 4px 20px var(--glow-color),
      0 0 30px var(--glow-color),
      0 0 40px var(--glow-color);
  }

  .music-btn:hover::before {
    opacity: 1;
  }

  /* Enhanced spinning with glow when playing */
  .spinning .music-btn {
    box-shadow:
      0 4px 20px var(--glow-color),
      0 0 30px var(--glow-color);
  }

  /* Waveform styling */
  .waveform {
    transition: opacity 0.3s ease;
  }

  .wave-bar {
    filter: drop-shadow(0 0 3px var(--dominant-color));
  }

  /* Album art transition */
  .album-art {
    transition: opacity 0.5s ease;
  }

  /* Enhanced vinyl styling */
  .vinyl-outer {
    transition: all 0.3s ease;
  }

  .spinning .vinyl-outer {
    filter: drop-shadow(0 0 5px var(--dominant-color));
  }

  .hover-player {
    position: absolute;
    right: 50px;
    opacity: 0;
    transform: translateX(10px);
    pointer-events: none;
    transition: all 0.3s ease;
    z-index: 1;
  }

  .music-wrapper:hover .hover-player,
  .hover-player.active {
    opacity: 1;
    transform: translateX(0);
    pointer-events: auto;
  }

  @media (max-width: 768px) {
    .zoomed-circle {
      width: 200px;
      height: 200px;
    }
    .hover-player iframe {
      width: 250px;
    }
    .music-btn:hover {
      box-shadow:
        0 2px 15px var(--glow-color),
        0 0 20px var(--glow-color);
    }
  }

  @media (max-width: 480px) {
    .zoomed-circle {
      width: 150px;
      height: 150px;
    }
    .hover-player iframe {
      width: 200px;
    }
  }

  /* Accessibility - reduce animations for users who prefer reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .spinning {
      animation: none;
    }

    .wave-bar animate {
      animation-duration: 0s;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const musicBtn = document.getElementById("music-toggle");
    const hoverPlayer = document.querySelector(".hover-player");
    const vinylSvg = document.querySelector(".vinyl-svg");
    const albumArt = document.querySelector(".album-art");
    const vinylOuter = document.querySelector(".vinyl-outer");
    const waveform = document.querySelector(".waveform");

    let isActive = false;
    let isPlaying = false;
    let dominantColor = "#1DB954"; // Spotify green as fallback

    // Extract dominant color from image
    function extractDominantColor(imageUrl) {
      return new Promise((resolve) => {
        const img = new Image();
        img.crossOrigin = "anonymous";
        img.onload = function () {
          const canvas = document.createElement("canvas");
          const ctx = canvas.getContext("2d");
          canvas.width = this.width;
          canvas.height = this.height;

          ctx.drawImage(this, 0, 0);

          const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
          const data = imageData.data;
          const colorMap = {};

          // Sample pixels and find most common color
          for (let i = 0; i < data.length; i += 16) {
            // Sample every 4th pixel
            const r = data[i];
            const g = data[i + 1];
            const b = data[i + 2];
            const alpha = data[i + 3];

            if (alpha > 128) {
              // Only consider non-transparent pixels
              const color = `${r},${g},${b}`;
              colorMap[color] = (colorMap[color] || 0) + 1;
            }
          }

          // Find the most frequent color
          let maxCount = 0;
          let dominantRGB = "29,185,84"; // Fallback

          for (const [color, count] of Object.entries(colorMap)) {
            if (count > maxCount) {
              maxCount = count;
              dominantRGB = color;
            }
          }

          resolve(`rgb(${dominantRGB})`);
        };
        img.onerror = () => resolve("#1DB954");
        img.src = imageUrl;
      });
    }

    // Update album art and colors
    async function updateAlbumArt(trackUrl) {
      try {
        // Extract track ID from Spotify URL
        const trackId = trackUrl.match(/track\/([a-zA-Z0-9]+)/)?.[1];
        if (!trackId) return;

        // For demo purposes, using a placeholder. In real implementation,
        // you'd use Spotify Web API to get album art
        const albumArtUrl = `https://i.scdn.co/image/ab67616d0000b273${trackId.substring(0, 32)}`;

        // Update album art
        albumArt.setAttribute("href", albumArtUrl);
        albumArt.style.opacity = "0.9";

        // Extract and apply dominant color
        dominantColor = await extractDominantColor(albumArtUrl);
        applyColorTheme(dominantColor);
      } catch (error) {
        console.log("Could not load album art, using default");
        // Use a default album art image
        albumArt.setAttribute(
          "href",
          "https://via.placeholder.com/300x300/1DB954/ffffff?text=♪"
        );
        albumArt.style.opacity = "0.9";
      }
    }

    // Apply color theme
    function applyColorTheme(color) {
      const musicBtnElement = musicBtn;

      // Update CSS custom properties for dynamic theming
      musicBtnElement.style.setProperty("--dominant-color", color);
      musicBtnElement.style.setProperty("--glow-color", color + "40"); // 40 = 25% opacity in hex
    }

    // Toggle functionality with enhanced features
    musicBtn.addEventListener("click", async () => {
      if (window.innerWidth <= 768) {
        isActive = !isActive;
        hoverPlayer.classList.toggle("active", isActive);
      }

      isPlaying = !isPlaying;

      // Toggle spinning animation
      vinylSvg.classList.toggle("spinning", isPlaying);

      // Toggle waveform
      if (waveform) {
        waveform.style.opacity = isPlaying ? "1" : "0";
      }

      // Update album art when playing starts
      if (isPlaying) {
        const currentTrackUrl = document.querySelector("#spotify-player")?.src;
        if (currentTrackUrl) {
          await updateAlbumArt(currentTrackUrl);
        }
      }
    });

    // Initialize with current track
    const initialTrackUrl = document.querySelector("#spotify-player")?.src;
    if (initialTrackUrl) {
      updateAlbumArt(initialTrackUrl);
    }
  });
</script>
